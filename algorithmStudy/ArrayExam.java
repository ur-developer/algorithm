
//ArrayChenk
public class ArrayCheck {
	public static void main(String[] args) {
		// 1) 배열을 만드는 방법1
		//	  배열을 만들 때 부터 값을 알고 있는 경우
		int [] ages = {60, 60 ,30, 20, 10}; 
		
		// 2) 배열을 만드는 방법2
		//    배열를 만들 때는 값을 모르고 나중에 값을 넣는 경우
		double[] weight = new double[5];
		weight[0] = 77.8;
		weight[1] = 45.5;
		weight[2] = 88.5;
		weight[3] = 99.5;
		weight[4] = 35.5;
		
		// for문 2가지
		// c 타입
		for( int i = 0; i < weight.length; i++) {
			System.out.println(ages[i]+ " " + weight[i] );
		}
	
		// for-each
		for ( double d : weight) {
			System.out.println(d);
		}
	}
}

<Console>
60 77.8
60 45.5
30 88.5
20 99.5
10 35.5
77.8
45.5
88.5
99.5
35.5

//ArrayEx01
public class ArrayEx01 {
	public static void main(String[] args) {
		for ( int i = 0; i < 10; i++) {
			for ( int j = 0; j < 10; j++ ) {
				System.out.print(j + " ");
			}
			System.out.println();
		}
	}
}

<Console>
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9 
0 1 2 3 4 5 6 7 8 9

//ArrayEx02
public class ArrayEx02 {

	public static void main(String[] args) {
		for (int i = 2; i  < 10; i++) {
			for (int j = 1; j < 10; j++) {
				System.out.print(i + "*" + j + "=" + i * j + "\t");
			}
			System.out.println();
		}	
	}
}

<Console>
2*1=2	2*2=4	2*3=6	2*4=8	2*5=10	2*6=12	2*7=14	2*8=16	2*9=18	
3*1=3	3*2=6	3*3=9	3*4=12	3*5=15	3*6=18	3*7=21	3*8=24	3*9=27	
4*1=4	4*2=8	4*3=12	4*4=16	4*5=20	4*6=24	4*7=28	4*8=32	4*9=36	
5*1=5	5*2=10	5*3=15	5*4=20	5*5=25	5*6=30	5*7=35	5*8=40	5*9=45	
6*1=6	6*2=12	6*3=18	6*4=24	6*5=30	6*6=36	6*7=42	6*8=48	6*9=54	
7*1=7	7*2=14	7*3=21	7*4=28	7*5=35	7*6=42	7*7=49	7*8=56	7*9=63	
8*1=8	8*2=16	8*3=24	8*4=32	8*5=40	8*6=48	8*7=56	8*8=64	8*9=72	
9*1=9	9*2=18	9*3=27	9*4=36	9*5=45	9*6=54	9*7=63	9*8=72	9*9=81	

//ArrayRandom
import java.util.Random;

public class ArrayRandom {

	public static void main(String[] args) {
		Random r = new Random(100);
		
		int[] numbers = new int[1000];
		//numbers = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,.....}
		for (int i = 0; i < numbers.length; i++) {
			numbers[i] = r.nextInt(101);
			// 정수 +- 21 --> 0~100
		}
		for (int i = 0; i < numbers.length; i++) {
			System.out.println(i + ": " + numbers[i]);
		}
	}
}

<Console>
0: 92 ~ 999: 95

//ArrayMin
public class ArrayMin {

	public static void main(String[] args) {
		int[] s = { 90,80, 20, 60, 70};
		int min = s[0];

		for (int x : s) {
			if (x < min) min = x;
		} // for
		System.out.println("최소값은 " + min);
	} //main
}

<Console>
최소값은 20

//ArrayMin01
public class ArrayMin01 {

	// 랜덤한 값 1000개를 발생시켜 배열에 넣어
	// 1. 최소값을 구하고
	// 2. 최소값을 구하라
	// 3. 최소값의 개수는?
	
	public static void main(String[] args) {
		int[] s =  new int[1000]; //공간
		// 랜덤한 값 발생시키는 객체 생성
		Random r = new Random();
		for (int i =0; i < s.length; i++) {
			s[i] = r.nextInt(999) + 1; // 0~998 --> 1~999
			//r.nextInt(바운더리 최대값보다 1 큰 값)
		}
		System.out.println(Arrays.toString(s));
		
		int min = s[0];
		for (int x : s) {
			if(x < min) {
				min = x;
			} // if
		} // for
		System.out.println("최소값>> " + min);
	
		int count = 0;
		for(int x : s) {
			if (x == min) { 
				count++;
			}
		}
		System.out.println("최소값의 개수는 " + count + "개");
	}
}

<Console>
[269, 122, 825, 298, 646, 220, 123, 882, 107, 92, 710, 444, 659, 618, 117, 16, 740, 334, 451, 89, 966, 661, 219, 561, 518, 522, 493, 861, 866, 516, 430, 378, 923, 693, 646, 739, 242, 992, 984, 972, 554, 254, 763, 265, 846, 344, 847, 396, 185, 554, 355, 687, 776, 755, 205, 584, 515, 953, 706, 809, 31, 489, 288, 979, 572, 519, 990, 274, 411, 240, 902, 620, 482, 503, 644, 164, 629, 254, 805, 959, 532, 886, 777, 942, 714, 967, 120, 403, 118, 286, 954, 473, 731, 285, 772, 938, 188, 934, 406, 502, 401, 797, 399, 863, 222, 442, 514, 485, 29, 695, 234, 570, 685, 117, 272, 145, 367, 847, 185, 427, 105, 896, 592, 996, 852, 552, 999, 253, 336, 537, 413, 72, 160, 525, 221, 732, 539, 207, 829, 758, 910, 359, 217, 424, 599, 698, 832, 220, 907, 742, 527, 799, 225, 740, 492, 310, 265, 969, 734, 184, 481, 273, 409, 64, 187, 764, 726, 636, 748, 899, 751, 399, 349, 514, 952, 865, 486, 758, 250, 411, 833, 540, 729, 16, 230, 760, 172, 543, 640, 66, 340, 934, 975, 105, 387, 548, 820, 202, 788, 988, 956, 550, 586, 186, 274, 187, 234, 334, 788, 381, 540, 361, 327, 237, 465, 693, 399, 189, 843, 569, 797, 35, 662, 317, 575, 176, 671, 57, 614, 500, 292, 922, 301, 643, 732, 804, 581, 879, 882, 386, 234, 153, 814, 57, 690, 492, 103, 852, 306, 558, 161, 590, 253, 819, 750, 844, 75, 850, 612, 955, 676, 736, 284, 963, 8, 339, 127, 183, 3, 216, 552, 978, 217, 204, 725, 986, 623, 157, 791, 806, 514, 774, 786, 455, 928, 646, 423, 840, 876, 499, 262, 130, 856, 232, 68, 758, 846, 714, 639, 837, 624, 461, 151, 452, 428, 610, 918, 219, 758, 486, 872, 251, 946, 456, 72, 729, 439, 358, 801, 228, 399, 58, 781, 157, 330, 128, 453, 72, 465, 762, 499, 624, 165, 932, 960, 271, 488, 127, 988, 258, 828, 195, 577, 816, 168, 305, 681, 908, 567, 805, 807, 53, 849, 778, 339, 804, 400, 539, 107, 848, 623, 767, 409, 656, 747, 420, 107, 937, 896, 191, 668, 322, 524, 199, 482, 997, 507, 528, 638, 691, 38, 747, 71, 309, 726, 95, 208, 139, 175, 429, 243, 503, 936, 585, 425, 858, 300, 241, 67, 257, 203, 516, 365, 613, 43, 886, 988, 795, 79, 220, 314, 806, 730, 929, 109, 564, 917, 53, 65, 389, 52, 88, 96, 591, 355, 515, 603, 177, 589, 586, 492, 306, 87, 662, 426, 487, 705, 700, 979, 620, 231, 554, 967, 342, 936, 837, 883, 792, 818, 981, 903, 427, 728, 452, 2, 302, 406, 865, 46, 106, 739, 39, 447, 463, 254, 512, 689, 449, 676, 909, 188, 25, 857, 775, 513, 896, 626, 186, 766, 3, 961, 824, 867, 878, 775, 726, 868, 266, 796, 361, 562, 148, 82, 714, 369, 750, 772, 256, 922, 176, 123, 870, 509, 852, 742, 849, 575, 549, 316, 675, 84, 211, 892, 56, 848, 813, 303, 342, 104, 101, 903, 673, 401, 907, 524, 399, 197, 355, 412, 725, 580, 123, 809, 457, 696, 227, 349, 91, 194, 914, 100, 304, 144, 474, 144, 499, 5, 229, 336, 429, 626, 101, 314, 516, 78, 805, 367, 897, 775, 460, 674, 979, 970, 116, 154, 411, 3, 945, 429, 111, 491, 566, 129, 123, 157, 33, 913, 336, 737, 553, 414, 512, 73, 117, 558, 280, 90, 296, 648, 221, 436, 416, 981, 491, 911, 685, 232, 175, 90, 715, 455, 376, 902, 322, 102, 681, 657, 473, 209, 856, 461, 492, 898, 25, 67, 414, 64, 118, 60, 715, 644, 148, 134, 933, 838, 302, 375, 831, 563, 25, 714, 646, 394, 325, 494, 973, 544, 194, 210, 842, 899, 956, 859, 182, 98, 580, 713, 689, 379, 679, 269, 313, 623, 333, 475, 721, 309, 498, 443, 85, 845, 301, 570, 732, 716, 94, 528, 61, 745, 551, 507, 267, 784, 133, 872, 134, 631, 375, 835, 168, 375, 576, 690, 661, 166, 768, 584, 636, 742, 259, 2, 685, 31, 636, 987, 311, 782, 408, 864, 959, 503, 465, 18, 341, 543, 38, 642, 474, 237, 346, 444, 194, 882, 548, 804, 822, 916, 99, 145, 373, 231, 861, 897, 411, 508, 557, 17, 361, 174, 75, 177, 802, 417, 42, 448, 885, 43, 847, 628, 252, 68, 590, 137, 345, 976, 465, 893, 847, 720, 571, 156, 670, 747, 337, 771, 327, 30, 240, 306, 926, 532, 42, 849, 367, 527, 341, 78, 33, 30, 894, 485, 773, 832, 967, 508, 783, 270, 431, 898, 234, 189, 282, 854, 680, 636, 207, 982, 184, 350, 644, 511, 228, 187, 909, 679, 42, 500, 236, 439, 862, 521, 532, 25, 407, 784, 848, 987, 984, 887, 787, 688, 830, 557, 734, 893, 200, 851, 107, 492, 778, 590, 480, 108, 179, 472, 230, 23, 459, 754, 664, 17, 466, 425, 420, 908, 597, 659, 295, 943, 538, 567, 186, 485, 549, 503, 860, 871, 272, 427, 978, 671, 360, 858, 186, 280, 57, 655, 154, 545, 976, 977, 898, 181, 585, 984, 476, 858, 323, 566, 691, 621, 763, 445, 253, 581, 681, 101, 380, 676, 200, 904, 140, 646, 561, 377, 828, 355, 958, 861, 215, 146, 326, 421, 650, 130, 813, 448, 650, 35, 603, 611, 812, 280, 125, 409, 939, 338, 11, 481, 280, 26, 636, 30, 322, 428, 696, 956, 735, 455, 722, 167, 753, 233, 151, 632, 183, 880, 520, 165, 966, 499, 644, 2, 194, 789, 141, 966, 722, 592, 831, 918, 944, 262, 960, 467, 882, 307, 980, 973, 239, 985, 348, 416, 550, 290, 573, 508, 550, 741, 342, 620, 512, 124, 837, 597, 926, 180, 155, 419, 640, 822, 624, 25, 873, 189, 710, 378, 440, 438, 560, 729, 81, 934, 169, 49, 490, 58, 70, 47, 120, 266, 80, 425, 967, 869, 149, 415, 910, 963, 827]
최소값>> 2
최소값의 개수는 3개

//Ex ArrayMax01
public class ArrayMax01 {
	// 랜덤한 값 1000개를 발생시켜 배열에 넣어
	// 1. 최소값을 구하고
	// 2. 최소값을 구하라
	// 3. 최소값의 개수는?
	public static void main(String[] args) {
		int[] s =  new int[1000]; //공간
		// 랜덤한 값 발생시키는 객체 생성
		Random r = new Random();
		for (int i =0; i < s.length; i++) {
			s[i] = r.nextInt(999) + 1; // 0~998 --> 1~999
			//r.nextInt(바운더리 최대값보다 1 큰 값)
		}
		System.out.println(Arrays.toString(s));
		
		int max = s[0];
		for (int x :s) {
			if (x > max) {
				max = x;
			} // if
		} // for
	
		System.out.println("최대값>> " + max);

		// 최대값이 몇 개인지 카운트해보기
		int count = 0;
		for (int x : s) {
			if(x == max) {
				count++;
			}
		}
		System.out.println("최대값은 개수는 " + count + "개");
	}
}

<Console>
[271, 586, 287, 320, 621, 632, 588, 309, 296, 789, 432, 260, 688, 77, 422, 106, 534, 679, 655, 951, 462, 539, 72, 880, 199, 330, 630, 326, 198, 451, 909, 177, 66, 770, 812, 403, 427, 276, 135, 3, 374, 199, 460, 715, 267, 171, 535, 835, 152, 733, 596, 68, 173, 684, 725, 943, 379, 191, 459, 515, 476, 497, 532, 660, 810, 467, 667, 302, 16, 157, 321, 550, 303, 121, 152, 386, 168, 360, 838, 118, 491, 83, 156, 15, 949, 620, 871, 367, 66, 741, 59, 487, 180, 702, 870, 774, 455, 461, 595, 481, 367, 526, 551, 766, 521, 106, 106, 478, 575, 406, 473, 820, 397, 36, 665, 477, 469, 28, 494, 685, 877, 8, 294, 142, 971, 839, 997, 568, 754, 932, 353, 374, 885, 384, 786, 635, 978, 698, 873, 12, 305, 683, 579, 106, 183, 504, 346, 600, 681, 980, 120, 910, 173, 149, 776, 861, 879, 984, 704, 986, 215, 24, 609, 641, 834, 356, 991, 858, 675, 822, 166, 383, 782, 97, 866, 326, 3, 905, 991, 488, 975, 913, 883, 828, 638, 612, 300, 690, 164, 96, 603, 568, 677, 548, 81, 669, 338, 943, 923, 551, 38, 382, 563, 905, 365, 704, 117, 404, 61, 855, 614, 163, 772, 569, 585, 772, 416, 985, 493, 10, 513, 846, 273, 365, 282, 510, 458, 957, 186, 581, 978, 880, 228, 565, 421, 72, 158, 167, 47, 422, 824, 558, 569, 118, 103, 411, 203, 209, 551, 237, 902, 968, 801, 840, 36, 656, 377, 817, 968, 68, 41, 155, 78, 289, 608, 868, 109, 583, 563, 897, 218, 564, 336, 519, 778, 212, 483, 860, 466, 956, 406, 665, 819, 5, 445, 622, 160, 674, 845, 925, 248, 420, 15, 966, 610, 62, 300, 569, 359, 94, 492, 798, 914, 522, 423, 616, 463, 862, 194, 692, 81, 789, 993, 794, 573, 52, 745, 907, 694, 365, 37, 247, 236, 96, 965, 460, 598, 364, 825, 792, 327, 938, 849, 347, 777, 5, 544, 421, 377, 152, 441, 458, 337, 257, 121, 284, 563, 904, 447, 110, 68, 411, 294, 802, 43, 762, 86, 583, 888, 176, 507, 839, 62, 804, 159, 462, 375, 548, 819, 326, 549, 75, 917, 431, 826, 701, 419, 792, 8, 958, 523, 591, 975, 80, 780, 881, 348, 359, 167, 422, 820, 821, 881, 860, 140, 907, 849, 711, 567, 848, 430, 791, 125, 295, 226, 756, 502, 814, 218, 948, 778, 819, 320, 201, 38, 855, 181, 978, 350, 566, 237, 79, 697, 594, 753, 356, 102, 836, 818, 994, 364, 134, 349, 650, 560, 475, 159, 680, 284, 974, 893, 617, 328, 142, 258, 46, 51, 335, 326, 436, 258, 209, 723, 521, 426, 929, 979, 143, 504, 617, 2, 845, 145, 340, 144, 312, 594, 495, 821, 155, 580, 655, 601, 960, 573, 329, 393, 763, 890, 634, 631, 95, 52, 17, 487, 395, 799, 407, 325, 898, 915, 884, 992, 115, 363, 150, 367, 248, 57, 20, 762, 351, 522, 498, 41, 237, 746, 930, 173, 29, 943, 892, 333, 477, 500, 722, 721, 954, 228, 852, 182, 858, 663, 405, 581, 809, 650, 605, 924, 804, 719, 651, 811, 959, 508, 447, 942, 509, 52, 878, 752, 471, 655, 450, 975, 728, 259, 394, 923, 528, 586, 711, 920, 216, 805, 131, 655, 143, 505, 116, 744, 212, 401, 518, 477, 877, 331, 553, 974, 975, 565, 662, 733, 911, 206, 836, 135, 637, 606, 693, 993, 504, 43, 553, 287, 304, 156, 895, 202, 539, 955, 455, 657, 733, 114, 977, 67, 231, 763, 554, 358, 928, 789, 842, 690, 488, 397, 562, 798, 845, 161, 29, 139, 321, 431, 500, 96, 447, 517, 515, 207, 746, 575, 363, 59, 3, 927, 389, 934, 628, 579, 972, 257, 452, 633, 200, 633, 627, 537, 7, 135, 149, 148, 259, 743, 821, 926, 666, 311, 432, 551, 376, 35, 403, 531, 199, 43, 818, 252, 742, 733, 888, 32, 993, 94, 752, 859, 745, 861, 499, 693, 3, 490, 831, 517, 849, 42, 579, 795, 146, 787, 812, 857, 672, 698, 276, 914, 958, 39, 819, 152, 362, 231, 52, 45, 316, 221, 549, 837, 272, 444, 910, 509, 459, 924, 824, 673, 121, 203, 219, 37, 70, 730, 989, 538, 791, 514, 920, 643, 647, 791, 49, 238, 305, 692, 517, 174, 12, 287, 331, 914, 775, 88, 344, 104, 568, 817, 731, 591, 564, 84, 511, 666, 684, 832, 399, 529, 130, 287, 179, 491, 515, 90, 429, 707, 27, 828, 474, 410, 545, 164, 997, 629, 222, 970, 330, 385, 225, 733, 112, 201, 221, 773, 346, 477, 373, 479, 171, 453, 926, 953, 955, 305, 876, 30, 785, 811, 366, 184, 79, 436, 802, 43, 647, 880, 808, 593, 382, 876, 683, 800, 516, 436, 288, 716, 200, 143, 507, 567, 765, 79, 8, 985, 691, 294, 596, 126, 371, 348, 173, 497, 580, 43, 399, 121, 148, 881, 829, 381, 572, 240, 314, 902, 305, 983, 474, 612, 311, 793, 720, 517, 397, 140, 470, 9, 233, 980, 159, 135, 133, 607, 932, 503, 948, 461, 159, 520, 175, 533, 590, 139, 919, 908, 30, 950, 532, 309, 771, 852, 243, 952, 403, 711, 525, 654, 42, 163, 587, 767, 882, 139, 977, 687, 142, 576, 566, 637, 715, 578, 30, 182, 987, 512, 424, 105, 527, 129, 768, 207, 372, 811, 271, 495, 635, 188, 888, 990, 246, 940, 735, 746, 363, 621, 397, 641, 612, 824, 712, 582, 436, 214, 612, 418, 367, 924, 653, 807, 764, 361, 962, 604, 702, 56, 27, 836, 205, 730, 723, 907, 617, 237, 381, 994, 817, 958, 70, 807, 54, 271, 856, 164, 599, 635, 486, 353, 473, 53, 547, 447, 659, 585, 389, 515, 790, 532, 667, 447, 751, 614, 965, 725, 356, 435, 582, 355, 808, 623, 260, 244, 559, 106, 120, 190, 81, 149, 98, 190, 870, 371, 21, 931, 925, 421, 642, 498, 139, 268, 882, 982, 598]
최대값>> 997
최대값은 개수는 2개

import java.util.Scanner;

public class ArrayScanner02 {

	public static void main(String[] args) {
// 		11.1
// 	  	22.2
// 		33.3
// 		44.4
//		55.5
		Scanner sc = new Scanner(System.in);
		double[] numbers = new double[5];
		
		for (int i = 0; i < numbers.length; i++) {
			numbers[i] = sc.nextDouble();
		}
		sc.close(); // stream close
		for (double x : numbers) {
			System.out.println(x);
		}
	
		for (int i = 0; i < numbers.length; i++) {
			if(numbers[i]== 33.3 ) {
				System.out.println("33.3의 위치는 " + i);
			}
			if(numbers[i] == 22.2) {
				System.out.println("22.2의 위치는 " + i);
			}
		}
	}
}
